@page "/staff/create"

@using Microsoft.EntityFrameworkCore
@using Kinderhub.Data.Models
@inject IDbContextFactory<Kinderhub.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h4>Staff</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Staff" OnValidSubmit="AddStaff" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="firstname" class="form-label">FirstName:</label> 
                <InputText id="firstname" @bind-Value="Staff.FirstName" class="form-control" /> 
                <ValidationMessage For="() => Staff.FirstName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="lastname" class="form-label">LastName:</label> 
                <InputText id="lastname" @bind-Value="Staff.LastName" class="form-control" /> 
                <ValidationMessage For="() => Staff.LastName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="role" class="form-label">Role:</label> 
                <InputText id="role" @bind-Value="Staff.Role" class="form-control" /> 
                <ValidationMessage For="() => Staff.Role" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/staff">Back to List</a>
</div>

@code {

    [SupplyParameterFromForm]
    public Staff Staff { get; set; } = new();

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddStaff()
    {
        using var context = DbFactory.CreateDbContext();
        context.Staff.Add(Staff);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/staff");
    }
}
